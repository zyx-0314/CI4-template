name: CI4 Tests via Docker Compose

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/ci4

      - name: Build and push PHP image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  docker-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          echo "IMAGE_TAG=${{ needs.build.outputs.image-tag }}" >> $GITHUB_ENV

      - name: Start MySQL
        run: |
          docker compose -f compose.yaml -f compose.test.yaml up -d mysql

      - name: Run PHPUnit with coverage
        working-directory: ./backend
        run: |
          mkdir -p build/logs
          docker run --rm \
            --network host \
            -v $PWD:/var/www/html \
            ${{ env.IMAGE_TAG }} \
            ./vendor/bin/phpunit --colors=always --testdox \
            --coverage-clover build/logs/clover.xml

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-clover
          path: backend/build/logs/clover.xml
          if-no-files-found: warn

      - name: Tear down
        if: always()
        run: docker compose -f compose.yaml -f compose.test.yaml down -v
