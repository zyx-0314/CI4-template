name: Testing

on:
  push:
    branches: [ "main", "Funeral-Homes-Demo/main" ]
  pull_request:
    branches: [ "main", "Funeral-Homes-Demo/main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-file: project.tar
      image-tag: project:test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image (no push, just save)
        run: |
          docker build -t project:test ./backend -f ./backend/Dockerfile
          docker save project:test -o project.tar

      - name: Upload image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: project
          path: project.tar

  mysql-docker-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download built image
        uses: actions/download-artifact@v4
        with:
          name: project
          path: .

      - name: Load Docker image
        run: docker load -i project.tar

      - name: Start MySQL
        run: docker compose -f compose.yaml -f compose.yaml up -d mysql

      - name: Show service health (debug)
        run: docker compose -f compose.yaml -f compose.yaml ps

  ci4-docker-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download built image
        uses: actions/download-artifact@v4
        with:
          name: project
          path: .

      - name: Load Docker image
        run: docker load -i project.tar
        
      - name: Start CI4
        run: docker compose -f compose.yaml -f compose.yaml up -d php
        
      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-clover
          path: backend/build/logs/clover.xml
          if-no-files-found: warn

      - name: Tear down
        if: always()
        run: docker compose -f compose.yaml -f compose.yaml down -v

  composer-checks:
    name: Composer checks (health)
    runs-on: ubuntu-latest
    needs: ci4-docker-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download built image
        uses: actions/download-artifact@v4
        with:
          name: project
          path: .

      - name: Load Docker image
        run: docker load -i project.tar

      - name: Start php service
        run: docker compose -f compose.yaml -f compose.yaml up -d php nginx

      - name: Run composer health inside php container
        run: docker compose -f compose.yaml exec php composer health

      - name: Tear down
        if: always()
        run: docker compose -f compose.yaml -f compose.yaml down -v

  db-migration-seed-checks:
    name: DB migration & seed checks
    runs-on: ubuntu-latest
    needs: [ mysql-docker-test, composer-checks ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download built image
        uses: actions/download-artifact@v4
        with:
          name: project
          path: .


      - name: Load Docker image
        run: docker load -i project.tar

      - name: Start php + mysql services
        run: docker compose -f compose.yaml -f compose.yaml up -d

      - name: Run migrations (composer)
        run: docker compose -f compose.yaml exec php composer migrate || true

      - name: Show migrations status (composer)
        run: docker compose -f compose.yaml exec php composer migrate:status || true

      - name: Ensure more than 1 migration file exists
        run: |
          docker compose -f compose.yaml exec php sh -lc "php -r \"echo count(glob('app/Database/Migrations/*.php')) . PHP_EOL;\"" | awk '{if ($1<=1) {print \"Need >1 migration files; found:\",$1; exit 1} else {print \"Migration files:\",$1}}'

      - name: Run seeders (composer)
        run: docker compose -f compose.yaml exec php composer seed || true

      - name: Verify at least one table has data (no hard-coded names)
        run: |
          docker compose -f compose.yaml exec mysql sh -lc "\
          total=0; \
          for t in $(mysql -u root -proot -N -e \"SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='app' AND TABLE_TYPE='BASE TABLE'\"); do \
            c=$(mysql -u root -proot -N -e \"SELECT COUNT(*) FROM app.\\\\\`$t\\\\`\"); \
            total=$((total + c)); \
          done; \
          echo \"Total rows across tables: $total\"; \
          if [ $total -eq 0 ]; then echo \"No seeded data found in any table\"; exit 1; fi"

      - name: Run truncate seeder (composer)
        run: docker compose -f compose.yaml exec php composer truncate || true

      - name: Verify all tables are empty (no hard-coded names)
        run: |
          docker compose -f compose.yaml exec mysql sh -lc "\
          total=0; \
          for t in $(mysql -u root -proot -N -e \"SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='app' AND TABLE_TYPE='BASE TABLE'\"); do \
            c=$(mysql -u root -proot -N -e \"SELECT COUNT(*) FROM app.\\\\\`$t\\\\`\"); \
            total=$((total + c)); \
          done; \
          echo \"Total rows after truncate: $total\"; \
          if [ $total -ne 0 ]; then echo \"Some tables still contain data\"; exit 1; fi"

      - name: Tear down
        if: always()
        run: docker compose -f compose.yaml -f compose.yaml down -v
