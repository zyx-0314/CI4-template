name: CI4 Tests via Docker Compose

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  docker-test: 
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build images (php/nginx) with Compose
        run: |
          docker compose -f compose.yaml -f compose.test.yaml build

      - name: Start only MySQL for tests (detached)
        run: |
          docker compose -f compose.yaml -f compose.test.yaml up -d mysql

      - name: Show service health (debug)
        run: docker compose -f compose.yaml -f compose.test.yaml ps

      # - name: Run DB migrations (quiet)
      #   working-directory: ./backend
      #   run: |
      #     docker compose -f ../compose.yaml -f ../compose.test.yaml run --rm php \
      #       php spark migrate --all --quiet

      # - name: Seed test data
      #   working-directory: ./backend
      #   run: |
      #     docker compose -f ../compose.yaml -f ../compose.test.yaml run --rm php \
      #       php spark db:seed TestSeeder --quiet

      # - name: Run PHPUnit with coverage
      #   working-directory: ./backend
      #   run: |
      #     mkdir -p build/logs
      #     docker compose -f ../compose.yaml -f ../compose.test.yaml run --rm php \
      #       ./vendor/bin/phpunit --colors=always --testdox \
      #       --coverage-clover build/logs/clover.xml

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-clover
          path: backend/build/logs/clover.xml
          if-no-files-found: warn

      - name: Tear down
        if: always()
        run: |
          docker compose -f compose.yaml -f compose.test.yaml down -v

  oop-check:
    runs-on: ubuntu-latest
    needs: docker-test   # run after tests succeed

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build PHP image only
        run: |
          docker compose -f compose.yaml -f compose.test.yaml build php

      - name: Run PHPStan analysis
        working-directory: ./backend
        run: |
          docker compose -f ../compose.yaml -f ../compose.test.yaml run --rm php \
            vendor/bin/phpstan analyse app --level=max
